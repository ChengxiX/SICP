#lang scheme
(define (accumulate op initial seq)
  (if (null? seq)
      initial
      (op (car seq)
          (accumulate op initial (cdr seq)))))
(define (map p seq)
  (accumulate (lambda (x y) (cons (p x) y)) '() seq))
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
;(append '(1 2 3) '(4 5 0))
(define (length seq)
  (accumulate (lambda (x y) (+ 1 y)) 0 seq))
;(length '(1 2 4 913))
(provide accumulate)