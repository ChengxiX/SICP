(define (make-queue) (let ((q (cons '() '())))
                       (define (empty?) (null? (car q)))
                       (define (dispatch op . argu)
                         (cond ((eq? op 'print) (display (car q)))
                               ((eq? op 'insert) (if (empty?) (begin (set-car! q (cons (car argu) '())) (set-cdr! q (car q))) (begin (set-cdr! (cdr q) (cons (car argu) '())) (set-cdr! q (cdr (cdr q))))))
                               ((eq? op 'delete) (set-car! q (cdr (car q)))))) ; 注意：(set-car! x) 不等于 (set (car x))
                       dispatch))
(define q (make-queue))
(q 'insert 'a)
(q 'insert 'a)
(q 'insert 'b)
(q 'delete)
(q 'print)