#lang scheme
(define (variable? x) (and (symbol? x) (not (op? x))))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (sum? x) (and (formula? x) (eq? (car x) '+)))
(define (addend x) (cadr x))
(define (augend x) (caddr x))
(define (make-sum a b) (cond ((and (eq? a 0) (eq? b 0)) 0)
                             ((eq? a 0) b)
                             ((eq? b 0) a)
                             (else (list '+ a b))))
(define (product? x) (and (formula? x)(eq? (car x) '*)))
(define (multiplier x) (cadr x))
(define (multiplicand x) (caddr x))
(define (make-product a b) (cond ((or (eq? a 0) (eq? b 0)) 0)
                                 ((eq? a 1) b)
                                 ((eq? b 1) a)
                                 (else (list '* a b))
                                 ))
(define (op? x) (or (eq? x '+) (eq? x '*) (eq? x '**)))
(define (formula? x) (list? x))
(define (exponentiation? x) (and (formula? x) (eq? (car x) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (make-exponentiation b e) (cond ((and (eq? b 0) (eq? e 0)) (error "0**0" b e))
                                        ((eq? b 0) 0)
                                        ((eq? b 1) 1)
                                        ((eq? e 1) b)
                                        ((eq? e 0) 1)
                                        (else (list '** b e))))
(define (deriv e v)
  (cond ((sum? e) (make-sum (deriv (addend e) v) (deriv (augend e) v)))
        ((product? e) (make-sum (make-product (multiplier e) (deriv (multiplicand e) v)) (make-product (deriv (multiplier e) v) (multiplicand e))))
        ((exponentiation? e) (make-product (exponent e) (make-exponentiation (base e) (make-sum (exponent e) -1))))
        ((variable? e) (if (same-variable? e v) 1 0))
        ((number? e) 0)
        (else (error "unknown expression " e))))