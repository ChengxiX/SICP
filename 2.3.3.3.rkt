#lang scheme
; tree: (entry left right)
(define (entry t) (car t))
(define (left-branch t) (cadr t))
(define (right-branch t) (caddr t))
(define (make-tree entry left right) (list entry left right))
(define (element-of-set? set n)
  (cond ((null? set) #f)
        ((= n (entry set)) #t)
        ((< n (entry set)) (element-of-set? (left-branch set) n))
        ((> n (entry set)) (element-of-set? (right-branch set) n))))
(define (make-set a) (list a '() '()))
(define (add-item set a) (cond ((= a (entry set)) set)
                               ((< a (entry set))
                                (if (null? (left-branch set))
                                    (make-tree (entry set) (make-set a) (right-branch set))
                                    (make-tree (entry set) (add-item (left-branch set) a) (right-branch set))))
                               ((> a (entry set))
                                (if (null? (right-branch set))
                                    (make-tree (entry set) (left-branch set) (make-set a))
                                    (make-tree (entry set) (left-branch set) (add-item (right-branch set) a)))
                                )))
;(define b (add-item (add-item (make-set 5) 3) 9))
;b
;(element-of-set? b 9)
(provide entry left-branch right-branch make-tree element-of-set? make-set add-item)