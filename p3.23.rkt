(define (make-deque) (cons '() '()))
(define (empty-deque? d) (null? (rear-deque d)))
(define (front-deque d) (car d))
(define (rear-deque d) (cdr d))
(define (front-insert-deque! d item)
  (if (empty-deque? d)
      (let ((dl (list '() item))) ; '() item '()
        (set-car! d dl)
        (set-cdr! d dl))
      (let ((new (cons '() (cons item (front-deque d)))))
        (set-car! (front-deque d) new)
        (set-car! d new))))
(define (rear-insert-deque! d item)
  (if (empty-deque? d)
      (let ((dl (list '() item)))
        (set-car! d dl)
        (set-cdr! d dl))
      (let ((new (list (rear-deque d) item)))
        (set-cdr! (cdr (rear-deque d)) new)
        (set-cdr! d new))
))
(define (front-delete-deque! d)
  (if (empty-deque? d) (error)
      (begin
        (set-car! d (cddr (front-deque d)))
        (set-car! (front-deque d) '())) ; 释放内存，不释放也可以
      ))
(define (rear-delete-deque! d)
  (if (empty-deque? d) (error)
      (begin
        (set-cdr! d (car (rear-deque d)))
        (set-cdr! (cdr (rear-deque d)) '())) ; 释放内存，不释放也可以
      ))
(define (make-debug) (let ((cnt 0)) (lambda () (display cnt) (set! cnt (+ cnt 1)))))
(define debug (make-debug))
(define (print-deque d)
  (display "( ")
  (if (empty-deque? d) (display " )\n")
  (let ((ptr  (front-deque d)))
    (define (iter)
      (if (eq? ptr (rear-deque d))
          (begin
            (display (cadr ptr))
            (display " ")
            (display ")\n"))
          (begin
            (display (cadr ptr))
            (display " ")
            (set! ptr (cddr ptr))
            (iter))
          ))
    (iter)
    ))
  )

(define d (make-deque))
(print-deque d)
(front-insert-deque! d 1)
(print-deque d)
(front-insert-deque! d 2)
(print-deque d)
(rear-insert-deque! d 3)
(print-deque d)
(front-insert-deque! d 4)
(print-deque d)
(rear-delete-deque! d)
(print-deque d)
(rear-delete-deque! d)
(print-deque d)
(front-delete-deque! d)
(print-deque d)
(rear-insert-deque! d 3)
(print-deque d)
(front-insert-deque! d 3)
(print-deque d)