#lang scheme
(define (make-segment a b) (cons a b))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (segment-equal? l m) (or (and (point-equal? (start-segment l) (start-segment m))
                                      (point-equal? (end-segment l) (end-segment m)))
                                 (and (point-equal? (start-segment l) (end-segment m))
                                      (point-equal? (end-segment l) (start-segment m)))))
(define (point-equal? a b) (and (= (x-point a) (x-point b))
                                (= (y-point a) (y-point b))))
(define (midpoint-segment l) (make-point (/ (+ (x-point (start-segment l)) (x-point (end-segment l))) 2)
                                         (/ (+ (y-point (start-segment l)) (y-point (end-segment l))) 2)))
(define (print-point p) (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
;(define p1 (make-point 1 2))
;(define p2 (make-point 4 1))
;(define l1 (make-segment p1 p2))
;(midpoint-segment l1)

; 练习2.3 还是得使用不同的load才能有效切换表示方式，不能自动切换